apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8spsphostnetworkingports
  annotations:
    metadata.gatekeeper.sh/title: "Host Networking Ports"
    metadata.gatekeeper.sh/version: 1.0.0
    description: >-
      Controls usage of host network namespace by pod containers. Specific
      ports must be specified. Corresponds to the `hostNetwork` and
      `hostPorts` fields in a PodSecurityPolicy. For more information, see
      https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
spec:
  crd:
    spec:
      names:
        kind: K8sPSPHostNetworkingPorts
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          type: object
          description: >-
            Controls usage of host network namespace by pod containers. Specific
            ports must be specified. Corresponds to the `hostNetwork` and
            `hostPorts` fields in a PodSecurityPolicy. For more information, see
            https://kubernetes.io/docs/concepts/policy/pod-security-policy/#host-namespaces
          properties:
            exemptImages:
              description: >-
                Any container that uses an image that matches an entry in this list will be excluded
                from enforcement. Prefix-matching can be signified with `*`. For example: `my-image-*`.

                It is recommended that users use the fully-qualified Docker image name (e.g. start with a domain name)
                in order to avoid unexpectedly exempting images from an untrusted repository.

                Namespaces are set per-image and can also be wildcarded, e.g. dev-app-*

                Each entry in exemptImages must have 2 entries:
                   namespace: <the namespace in which the image is allowed>
                   image: <as above, the image specification>
              type: array
              items:
                type: object
                properties:
                  namespace:
                      type: string
                  image:
                      type: string
            hostNetwork:
              description: "Determines if the policy allows the use of HostNetwork in the pod spec."
              type: boolean
            min:
              description: "The start of the allowed port range, inclusive."
              type: integer
            max:
              description: "The end of the allowed port range, inclusive."
              type: integer
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spsphostnetworkingports

        import data.lib.exempt_container.is_exempt

        violation[{"msg": msg, "details": {}}] {
            input_share_hostnetwork(input.review.object)
            msg := sprintf("The specified hostNetwork and hostPort are not allowed, pod: %v namespace: %v", [input.review.object.metadata.name, input.review.object.metadata.namespace])
        }

        input_share_hostnetwork(o) {
            not input.parameters.hostNetwork
            o.spec.hostNetwork
        }

        input_share_hostnetwork(o) {
            hostPort := input_containers[_].ports[_].hostPort
            hostPort < input.parameters.min
        }

        input_share_hostnetwork(o) {
            hostPort := input_containers[_].ports[_].hostPort
            hostPort > input.parameters.max
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
            ns := input.review.object.metadata.namespace
            not is_exempt(c, ns)
        }

        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
            ns := input.review.object.metadata.namespace
            not is_exempt(c, ns)
        }

        input_containers[c] {
            c := input.review.object.spec.ephemeralContainers[_]
            ns := input.review.object.metadata.namespace
            not is_exempt(c, ns)
        }
      libs:
        - |
          package lib.exempt_container

          is_exempt(container, namespace) {
              exempt_images := object.get(object.get(input, "parameters", {}), "exemptImages", [])
              img := container.image
              exemption := exempt_images[_]
              # empty namespace is ok, empty image is not
              exempt_namespace := object.get(exemption, "namespace", "")
              not exemption.image == ""
              _matches_exemption(img, exemption.image)
              _matches_exemption(namespace, exempt_namespace)
          }

          _matches_exemption(target, exemption) {
              exemption == ""
          }

          _matches_exemption(target, exemption) {
              not endswith(exemption, "*")
              exemption == target
          }

          _matches_exemption(target, exemption) {
              endswith(exemption, "*")
              prefix := trim_suffix(exemption, "*")
              startswith(target, prefix)
          }
